# Generated by Django 4.2.16 on 2025-06-14 14:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Автоматически устанавливается при создании записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Автоматически обновляется при изменении записи', verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, help_text='Помечает запись как удаленную без физического удаления', verbose_name='Удалено')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Время когда запись была помечена как удаленная', null=True, verbose_name='Дата удаления')),
                ('email', models.EmailField(blank=True, help_text='Email пользователя (устаревшее поле)', max_length=254, null=True, verbose_name='Email адрес')),
                ('name', models.CharField(help_text='ФИО пользователя', max_length=255, verbose_name='Полное имя')),
                ('telegram_id', models.CharField(help_text='Уникальный ID пользователя в Telegram (основной идентификатор)', max_length=50, unique=True, verbose_name='Telegram ID')),
                ('telegram_username', models.CharField(blank=True, help_text='Username пользователя в Telegram (@username)', max_length=100, null=True, verbose_name='Telegram username')),
                ('position', models.CharField(blank=True, help_text='Должность сотрудника в компании', max_length=255, null=True, verbose_name='Должность')),
                ('department', models.CharField(blank=True, help_text='Отдел или департамент', max_length=255, null=True, verbose_name='Отдел')),
                ('hire_date', models.DateField(blank=True, help_text='Дата поступления на работу', null=True, verbose_name='Дата найма')),
                ('is_active', models.BooleanField(default=True, help_text='Определяет, может ли пользователь войти в систему', verbose_name='Активен')),
                ('is_staff', models.BooleanField(default=False, help_text='Определяет доступ к административной панели Django', verbose_name='Сотрудник')),
                ('last_login_at', models.DateTimeField(blank=True, null=True, verbose_name='Последний вход')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Автоматически устанавливается при создании записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Автоматически обновляется при изменении записи', verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, help_text='Помечает запись как удаленную без физического удаления', verbose_name='Удалено')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Время когда запись была помечена как удаленная', null=True, verbose_name='Дата удаления')),
                ('is_active', models.BooleanField(default=True, help_text='Определяет, активна ли запись в системе', verbose_name='Активно')),
                ('name', models.CharField(choices=[('user', 'Пользователь'), ('buddy', 'Бадди'), ('moderator', 'Модератор')], help_text='Системное название роли', max_length=50, unique=True, verbose_name='Название роли')),
                ('display_name', models.CharField(help_text='Название роли для отображения пользователям', max_length=100, verbose_name='Отображаемое название')),
                ('description', models.TextField(help_text='Описание прав и возможностей роли', verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Автоматически устанавливается при создании записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Автоматически обновляется при изменении записи', verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, help_text='Помечает запись как удаленную без физического удаления', verbose_name='Удалено')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Время когда запись была помечена как удаленная', null=True, verbose_name='Дата удаления')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Когда была назначена роль', verbose_name='Дата назначения')),
                ('is_active', models.BooleanField(default=True, help_text='Активна ли роль в данный момент', verbose_name='Активна')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='Пользователь, который назначил эту роль', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL, verbose_name='Назначил')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_users', to='users.role', verbose_name='Роль')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Роль пользователя',
                'verbose_name_plural': 'Роли пользователей',
                'db_table': 'user_roles',
                'indexes': [models.Index(fields=['user', 'is_active'], name='user_roles_user_id_4ec42c_idx'), models.Index(fields=['role', 'is_active'], name='user_roles_role_id_57352b_idx')],
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='TelegramSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Автоматически устанавливается при создании записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Автоматически обновляется при изменении записи', verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, help_text='Помечает запись как удаленную без физического удаления', verbose_name='Удалено')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Время когда запись была помечена как удаленная', null=True, verbose_name='Дата удаления')),
                ('telegram_data', models.JSONField(help_text='Данные, полученные от Telegram Mini App', verbose_name='Данные Telegram')),
                ('auth_date', models.DateTimeField(help_text='Время авторизации в Telegram', verbose_name='Дата авторизации')),
                ('hash_value', models.CharField(help_text='Хеш для валидации данных', max_length=64, verbose_name='Хеш')),
                ('is_valid', models.BooleanField(default=True, help_text='Действительна ли сессия', verbose_name='Валидна')),
                ('expires_at', models.DateTimeField(help_text='Время истечения сессии', verbose_name='Истекает')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telegram_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Telegram сессия',
                'verbose_name_plural': 'Telegram сессии',
                'db_table': 'telegram_sessions',
                'indexes': [models.Index(fields=['user', 'is_valid'], name='telegram_se_user_id_799cf7_idx'), models.Index(fields=['expires_at'], name='telegram_se_expires_48318b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['telegram_id'], name='users_telegra_d76140_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['department'], name='users_departm_d50da8_idx'),
        ),
    ]
