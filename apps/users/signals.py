"""
–°–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.contrib.auth.signals import user_logged_in
from django.utils import timezone

from .models import User, UserRole, Role
from .tasks import welcome_new_user, update_user_activity


@receiver(post_save, sender=User)
def user_created_handler(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if created:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å "user" –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try:
            user_role = Role.objects.filter(name='user').first()
            if not user_role:
                user_role = Role.objects.create(
                    name='user',
                    display_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    description='–ë–∞–∑–æ–≤–∞—è —Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                )
            
            UserRole.objects.get_or_create(
                user=instance,
                role=user_role,
                defaults={'assigned_by': None}
            )
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {instance.id}: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        if instance.telegram_id:
            welcome_new_user.delay(instance.id)


@receiver(user_logged_in)
def update_last_login(sender, request, user, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    update_user_activity.delay(user.id)


@receiver(post_save, sender=UserRole)
def user_role_assigned_handler(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    if created and instance.is_active:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.info(
            f"–†–æ–ª—å '{instance.role.display_name}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {instance.user.name}"
        )
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ManyToMany –ø–æ–ª–µ roles —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # —á—Ç–æ–±—ã –º–µ—Ç–æ–¥—ã has_role –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∏–¥–µ–ª–∏ —Ä–æ–ª—å
        if not instance.user.roles.filter(id=instance.role.id).exists():
            instance.user.roles.add(instance.role)
            logger.debug(
                f"–†–æ–ª—å '{instance.role.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ M2M –ø–æ–ª–µ user.roles –¥–ª—è {instance.user.name}"
            )
        
        # –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å buddy, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if instance.role.name == 'buddy':
            from .tasks import send_telegram_notification
            
            message = (
                "üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å Buddy!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ù–∞–∑–Ω–∞—á–∞—Ç—å –ø–æ—Ç–æ–∫–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–∏—á–∫–∞–º\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏\n\n"
                "–£–¥–∞—á–∏ –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ!"
            )
            
            send_telegram_notification.delay(
                user_id=instance.user.id,
                message=message,
                notification_type='role_assigned'
            )


@receiver(post_delete, sender=User)
def user_deleted_handler(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.name} ({instance.email}) –±—ã–ª —É–¥–∞–ª–µ–Ω")


@receiver(post_save, sender=User)
def user_profile_updated_handler(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not created:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
        if hasattr(instance, '_state') and instance._state.adding is False:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            import logging
            logger = logging.getLogger(__name__)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if hasattr(instance, '_original_is_active'):
                if instance._original_is_active != instance.is_active:
                    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if instance.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.name} –±—ã–ª {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
            if hasattr(instance, '_original_department'):
                if instance._original_department != instance.department:
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –∏–∑ –æ—Ç–¥–µ–ª–∞ "
                        f"'{instance._original_department}' –≤ '{instance.department}'"
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞
                    if instance.department:
                        from apps.flows.tasks import auto_assign_flows_to_new_user
                        auto_assign_flows_to_new_user.delay(instance.id)


# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
@receiver(post_save, sender=User)
def store_user_original_values(sender, instance, **kwargs):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    if instance.pk:
        try:
            original = User.objects.get(pk=instance.pk)
            instance._original_is_active = original.is_active
            instance._original_department = original.department
        except User.DoesNotExist:
            pass