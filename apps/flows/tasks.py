"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""
from celery import shared_task
from django.utils import timezone
from django.db.models import Count, Q
from datetime import timedelta, datetime
import logging

logger = logging.getLogger('apps.flows.tasks')


@shared_task(bind=True, max_retries=3)
def check_overdue_flows(self):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        from .models import UserFlow, FlowAction
        from apps.users.tasks import send_telegram_notification
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        overdue_flows = UserFlow.objects.overdue().select_related(
            'user', 'flow'
        ).prefetch_related('flow_buddies__buddy_user')
        
        notifications_sent = 0
        
        for user_flow in overdue_flows:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                recent_notification = FlowAction.objects.filter(
                    user_flow=user_flow,
                    action_type='notification_sent',
                    performed_at__gte=timezone.now() - timedelta(days=1)
                ).exists()
                
                if not recent_notification:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    message = (
                        f"‚ö†Ô∏è –ü–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è '{user_flow.flow.title}' –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!\n"
                        f"–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {user_flow.expected_completion_date}\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –±–∞–¥–¥–∏."
                    )
                    
                    send_telegram_notification.delay(
                        user_id=user_flow.user.id,
                        message=message,
                        notification_type='overdue_flow'
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞–¥–¥–∏
                    for flow_buddy in user_flow.flow_buddies.filter(is_active=True):
                        buddy_message = (
                            f"‚ö†Ô∏è –£ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ {user_flow.user.name} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–æ—Ç–æ–∫ "
                            f"'{user_flow.flow.title}'\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {user_flow.progress_percentage:.1f}%\n"
                            f"–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {user_flow.expected_completion_date}"
                        )
                        
                        send_telegram_notification.delay(
                            user_id=flow_buddy.buddy_user.id,
                            message=buddy_message,
                            notification_type='buddy_overdue_alert'
                        )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    FlowAction.objects.create(
                        user_flow=user_flow,
                        action_type='notification_sent',
                        performed_by=None,
                        reason='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ',
                        metadata={
                            'notification_type': 'overdue_flow',
                            'overdue_days': (timezone.now().date() - user_flow.expected_completion_date).days
                        }
                    )
                    
                    notifications_sent += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {user_flow.id}: {str(e)}")
                continue
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}")
        return {
            'overdue_flows_count': overdue_flows.count(),
            'notifications_sent': notifications_sent
        }
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_overdue_flows: {str(exc)}")
        raise self.retry(exc=exc, countdown=60 * (self.request.retries + 1))


@shared_task(bind=True, max_retries=3)
def send_flow_reminders(self):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    """
    try:
        from .models import UserFlow
        from apps.users.tasks import send_telegram_notification
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ç–æ–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π
        stale_flows = UserFlow.objects.filter(
            status='in_progress',
            updated_at__lt=timezone.now() - timedelta(days=3)
        ).select_related('user', 'flow', 'current_step')
        
        reminders_sent = 0
        
        for user_flow in stale_flows:
            try:
                current_step_info = ""
                if user_flow.current_step:
                    current_step_info = f"\n–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {user_flow.current_step.title}"
                
                message = (
                    f"üìö –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ—Ç–æ–∫–µ –æ–±—É—á–µ–Ω–∏—è '{user_flow.flow.title}'\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {user_flow.progress_percentage:.1f}%"
                    f"{current_step_info}\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç—Å—Ç–∞—Ç—å –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞!"
                )
                
                send_telegram_notification.delay(
                    user_id=user_flow.user.id,
                    message=message,
                    notification_type='flow_reminder'
                )
                
                reminders_sent += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {user_flow.id}: {str(e)}")
                continue
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_sent}")
        return {
            'stale_flows_count': stale_flows.count(),
            'reminders_sent': reminders_sent
        }
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ send_flow_reminders: {str(exc)}")
        raise self.retry(exc=exc, countdown=60 * (self.request.retries + 1))


@shared_task(bind=True)
def generate_daily_statistics(self):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        from .models import UserFlow, Flow
        from apps.users.models import User
        
        today = timezone.now().date()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = User.objects.active_users().count()
        total_flows = Flow.objects.active().count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
        active_flows = UserFlow.objects.filter(status='in_progress').count()
        completed_today = UserFlow.objects.filter(
            completed_at__date=today
        ).count()
        overdue_flows = UserFlow.objects.overdue().count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º–æ—Å—Ç–∏
        total_assignments = UserFlow.objects.active().count()
        completed_assignments = UserFlow.objects.completed().count()
        completion_rate = (completed_assignments / total_assignments * 100) if total_assignments > 0 else 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        statistics = {
            'date': str(today),
            'users': {
                'total': total_users,
                'with_active_flows': active_flows
            },
            'flows': {
                'total': total_flows,
                'active_assignments': active_flows,
                'completed_today': completed_today,
                'overdue': overdue_flows,
                'completion_rate': round(completion_rate, 2)
            }
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Redis
        # from django.core.cache import cache
        # cache.set(f'daily_stats_{today}', statistics, timeout=60*60*24*7)  # –Ω–µ–¥–µ–ª—è
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {statistics}")
        return statistics
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(exc)}")
        raise


@shared_task(bind=True, max_retries=3)
def notify_flow_completion(self, user_flow_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
    """
    try:
        from .models import UserFlow
        from apps.users.tasks import send_telegram_notification
        
        user_flow = UserFlow.objects.select_related('user', 'flow').get(id=user_flow_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è "
            f"'{user_flow.flow.title}'!\n"
            f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {user_flow.completed_at - user_flow.started_at}\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        )
        
        send_telegram_notification.delay(
            user_id=user_flow.user.id,
            message=message,
            notification_type='flow_completed'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞–¥–¥–∏
        for flow_buddy in user_flow.flow_buddies.filter(is_active=True):
            buddy_message = (
                f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π {user_flow.user.name} –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ—Ç–æ–∫ "
                f"'{user_flow.flow.title}'\n"
                f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {user_flow.completed_at - user_flow.started_at}"
            )
            
            send_telegram_notification.delay(
                user_id=flow_buddy.buddy_user.id,
                message=buddy_message,
                notification_type='buddy_completion_alert'
            )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ {user_flow_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except UserFlow.DoesNotExist:
        logger.error(f"UserFlow {user_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(exc)}")
        raise self.retry(exc=exc, countdown=60 * (self.request.retries + 1))


@shared_task(bind=True, max_retries=3)
def notify_step_completion(self, user_flow_id, step_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞
    """
    try:
        from .models import UserFlow, FlowStep
        from apps.users.tasks import send_telegram_notification
        
        user_flow = UserFlow.objects.select_related('user', 'flow').get(id=user_flow_id)
        step = FlowStep.objects.get(id=step_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–∂–Ω—ã–π –ª–∏ —ç—Ç–æ —ç—Ç–∞–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–π)
        total_steps = user_flow.flow.total_steps
        completed_steps = user_flow.step_progress.filter(status='completed').count()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        if step.order % 3 == 0 or completed_steps == total_steps // 2:  # –∫–∞–∂–¥—ã–π 3-–π —ç—Ç–∞–ø –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞
            message = (
                f"üìã –≠—Ç–∞–ø '{step.title}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                f"–ü–æ—Ç–æ–∫: {user_flow.flow.title}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {user_flow.progress_percentage:.1f}%\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )
            
            send_telegram_notification.delay(
                user_id=user_flow.user.id,
                message=message,
                notification_type='step_completed'
            )
        
        return True
        
    except (UserFlow.DoesNotExist, FlowStep.DoesNotExist):
        logger.error(f"UserFlow {user_flow_id} –∏–ª–∏ Step {step_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞: {str(exc)}")
        raise self.retry(exc=exc, countdown=60 * (self.request.retries + 1))


@shared_task(bind=True)
def auto_assign_flows_to_new_user(self, user_id):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        from apps.users.models import User
        from .models import Flow, UserFlow
        
        user = User.objects.get(id=user_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        mandatory_flows = Flow.objects.mandatory()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        department_flows = Flow.objects.filter(
            auto_assign_departments__contains=[user.department]
        ) if user.department else Flow.objects.none()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ç–æ–∫–∏
        flows_to_assign = mandatory_flows.union(department_flows)
        
        assigned_count = 0
        for flow in flows_to_assign:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫
            if not UserFlow.objects.filter(user=user, flow=flow).exists():
                UserFlow.objects.create_with_steps(
                    user=user,
                    flow=flow,
                    expected_completion_date=timezone.now().date() + timedelta(days=30)
                )
                assigned_count += 1
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {assigned_count}")
        return {
            'user_id': user_id,
            'assigned_flows': assigned_count
        }
        
    except User.DoesNotExist:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: {str(exc)}")
        raise


@shared_task(bind=True)
def cleanup_old_flow_data(self):
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–æ–≤
    """
    try:
        from .models import FlowAction, UserQuizAnswer
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞)
        old_actions = FlowAction.objects.filter(
            performed_at__lt=timezone.now() - timedelta(days=365)
        )
        deleted_actions = old_actions.count()
        old_actions.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (—Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
        old_answers = UserQuizAnswer.objects.filter(
            answered_at__lt=timezone.now() - timedelta(days=180),
            user_flow__status='completed'
        )
        deleted_answers = old_answers.count()
        old_answers.delete()
        
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {deleted_actions} –¥–µ–π—Å—Ç–≤–∏–π, {deleted_answers} –æ—Ç–≤–µ—Ç–æ–≤")
        return {
            'deleted_actions': deleted_actions,
            'deleted_answers': deleted_answers
        }
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(exc)}")
        raise