"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import os
from django.core.management.base import BaseCommand
from django.db import transaction
from django.contrib.auth import get_user_model


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π, —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ Celery Beat'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã...'))
        
        success_count = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
        if self.create_roles():
            success_count += 1
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        if self.create_superuser():
            success_count += 1
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery Beat
        if self.setup_celery_beat():
            success_count += 1
            
        if success_count == 3:
            self.stdout.write(self.style.SUCCESS('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'))
        else:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ ({success_count}/3)'))

    def create_roles(self):
        try:
            from apps.users.models import Role
            
            roles_data = [
                {'name': 'user', 'display_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'description': '–ë–∞–∑–æ–≤–∞—è —Ä–æ–ª—å'},
                {'name': 'buddy', 'display_name': '–ë–∞–¥–¥–∏', 'description': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫'},
                {'name': 'moderator', 'display_name': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
            ]
            
            created_count = 0
            with transaction.atomic():
                for role_data in roles_data:
                    role, created = Role.objects.get_or_create(
                        name=role_data['name'],
                        defaults={
                            'display_name': role_data['display_name'],
                            'description': role_data['description'],
                            'is_active': True
                        }
                    )
                    if created:
                        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role.display_name}')
                        created_count += 1
                    else:
                        self.stdout.write(f'‚ÑπÔ∏è –†–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {role.display_name}')
            
            self.stdout.write(f'üìä –°–æ–∑–¥–∞–Ω–æ —Ä–æ–ª–µ–π: {created_count}')
            return True
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π: {e}'))
            return False

    def create_superuser(self):
        try:
            User = get_user_model()
            
            if User.objects.filter(is_superuser=True).exists():
                self.stdout.write('‚ÑπÔ∏è –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                return True
            
            admin_email = os.environ.get('ADMIN_EMAIL', 'admin@example.com')
            admin_password = os.environ.get('ADMIN_PASSWORD', 'admin123')
            admin_name = os.environ.get('ADMIN_NAME', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
            
            superuser = User.objects.create_superuser(
                email=admin_email,
                name=admin_name,
                password=admin_password
            )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            try:
                from apps.users.models import Role, UserRole
                moderator_role = Role.objects.get(name='moderator')
                UserRole.objects.create(user=superuser, role=moderator_role)
                self.stdout.write('‚úÖ –†–æ–ª—å "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞')
            except:
                pass
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {admin_email} / {admin_password}'))
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –°–ú–ï–ù–ò–¢–ï –ü–ê–†–û–õ–¨ –ü–û–°–õ–ï –ü–ï–†–í–û–ì–û –í–•–û–î–ê!'))
            return True
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}'))
            return False

    def setup_celery_beat(self):
        try:
            from django_celery_beat.models import PeriodicTask, IntervalSchedule
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            hourly, _ = IntervalSchedule.objects.get_or_create(every=1, period=IntervalSchedule.HOURS)
            daily, _ = IntervalSchedule.objects.get_or_create(every=1, period=IntervalSchedule.DAYS)
            
            tasks = [
                {'name': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤', 'task': 'apps.flows.tasks.check_overdue_flows', 'interval': daily},
                {'name': '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', 'task': 'apps.flows.tasks.send_flow_reminders', 'interval': hourly},
                {'name': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'task': 'apps.flows.tasks.generate_daily_statistics', 'interval': daily},
                {'name': '–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π', 'task': 'apps.users.tasks.cleanup_expired_sessions', 'interval': daily}
            ]
            
            created_count = 0
            for task_data in tasks:
                task, created = PeriodicTask.objects.get_or_create(
                    name=task_data['name'],
                    defaults={'task': task_data['task'], 'interval': task_data['interval'], 'enabled': True}
                )
                if created:
                    created_count += 1
            
            self.stdout.write(f'üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á Celery: {created_count}')
            return True
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Celery Beat: {e}'))
            return False
