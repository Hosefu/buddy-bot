<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="8" failures="7" skipped="0" tests="39" time="3.227" timestamp="2025-06-14T17:10:41.481117+03:00" hostname="d32a6b9e2602"><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_init_01_get_buddy_flows" time="1.219" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_init_02_get_buddy_users" time="0.021" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_init_03_start_flow_for_user" time="0.019" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_init_04_start_flow_no_deadline" time="0.015" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_init_05_start_flow_already_active" time="0.015" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_01_get_my_managed_flows" time="0.020" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_02_get_ward_progress" time="0.019"><failure message="assert 404 == 200&#10; +  where 404 = &lt;HttpResponseNotFound status_code=404, &quot;text/html; charset=utf-8&quot;&gt;.status_code&#10; +  and   200 = status.HTTP_200_OK">self = &lt;tests.test_buddy_api.TestBuddyApi object at 0xffffb018ccd0&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffaf646010&gt;
buddy_user = &lt;User: Buddy User (ID: 300)&gt;
managed_user_flow = &lt;UserFlow: Test User - Simple Flow&gt;

    def test_b_mgmt_02_get_ward_progress(self, api_client, buddy_user, managed_user_flow):
        """B-MGMT-02: GET /api/buddy/flow/{pid} — подробный прогресс подопечного."""
        api_client.force_authenticate(user=buddy_user)
        # pid - это id UserFlow
        response = api_client.get(f'/api/buddy/flow/{managed_user_flow.id}/')
    
&gt;       assert response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = &lt;HttpResponseNotFound status_code=404, "text/html; charset=utf-8"&gt;.status_code
E        +  and   200 = status.HTTP_200_OK

tests/test_buddy_api.py:118: AssertionError</failure></testcase><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_03_pause_flow" time="0.019" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_04_resume_flow" time="0.018" /><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_05_delete_flow" time="0.019"><failure message="AttributeError: DELETED">self = &lt;tests.test_buddy_api.TestBuddyApi object at 0xffffb018e0d0&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffafe63c50&gt;
buddy_user = &lt;User: Buddy User (ID: 300)&gt;
managed_user_flow = &lt;UserFlow: Test User - Simple Flow&gt;

    def test_b_mgmt_05_delete_flow(self, api_client, buddy_user, managed_user_flow):
        """B-MGMT-05: DELETE flow — удаляет UserFlow."""
        user_flow_id = managed_user_flow.id
        assert UserFlow.objects.filter(id=user_flow_id).exists()
    
        api_client.force_authenticate(user=buddy_user)
&gt;       response = api_client.delete(f'/api/buddy/flows/{user_flow_id}/')

tests/test_buddy_api.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:320: in delete
    response = super().delete(
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:222: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:234: in generic
    return super().generic(
/usr/local/lib/python3.11/site-packages/django/test/client.py:609: in generic
    return self.request(**r)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:286: in request
    return super().request(**kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:238: in request
    request = super().request(**kwargs)
/usr/local/lib/python3.11/site-packages/django/test/client.py:891: in request
    self.check_exception(response)
/usr/local/lib/python3.11/site-packages/django/test/client.py:738: in check_exception
    raise exc_value
/usr/local/lib/python3.11/site-packages/django/core/handlers/exception.py:55: in inner
    response = get_response(request)
/usr/local/lib/python3.11/site-packages/django/core/handlers/base.py:197: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
/usr/local/lib/python3.11/site-packages/django/views/decorators/csrf.py:56: in wrapper_view
    return view_func(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/views/generic/base.py:104: in view
    return self.dispatch(request, *args, **kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/generics.py:271: in delete
    return self.destroy(request, *args, **kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/mixins.py:91: in destroy
    self.perform_destroy(instance)
apps/flows/views.py:640: in perform_destroy
    action_type=FlowAction.ActionType.DELETED,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;enum 'ActionType'&gt;, name = 'DELETED'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
&gt;           raise AttributeError(name) from None
E           AttributeError: DELETED

/usr/local/lib/python3.11/enum.py:786: AttributeError</failure></testcase><testcase classname="tests.test_buddy_api.TestBuddyApi" name="test_b_mgmt_06_pause_foreign_flow" time="0.014" /><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_01_get_flow_details_unauthorized" time="0.002" /><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_01_get_flow_details_authenticated" time="0.007" /><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_04_get_article_details" time="0.005"><failure message="assert 404 == 200&#10; +  where 404 = &lt;HttpResponseNotFound status_code=404, &quot;text/html; charset=utf-8&quot;&gt;.status_code&#10; +  and   200 = status.HTTP_200_OK">self = &lt;tests.test_content_api.TestContentApi object at 0xffffb01f5110&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffafab5650&gt;
user = &lt;User: Test User (ID: 100)&gt;
article_factory = &lt;function article_factory.&lt;locals&gt;.create_article at 0xffffaf81fce0&gt;

    def test_cnt_04_get_article_details(self, api_client, user, article_factory):
        """CNT-04: GET /api/guides/{slug}/ — статья доступна вне флоу."""
        article = article_factory(title="Stand-alone Article", slug="standalone-article", content="Test content")
        api_client.force_authenticate(user=user)
        # Обратите внимание: URL для статей может быть /api/guides/, а не /api/articles/
        # Это зависит от корневой конфигурации urls.py проекта.
        # Предпологаем, что /api/guides/
        response = api_client.get(f'/api/guides/{article.slug}/')
&gt;       assert response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = &lt;HttpResponseNotFound status_code=404, "text/html; charset=utf-8"&gt;.status_code
E        +  and   200 = status.HTTP_200_OK

tests/test_content_api.py:77: AssertionError</failure></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_02_get_flow_steps_list" time="0.014"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(9, 1) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffb00d2050&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 114768, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 114774, tzinfo=datetime.timezone.utc), False, None, 9, 1, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffb00d2050&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(9, 1) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffaf81fa60&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffb00d2050&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 114768, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 114774, tzinfo=datetime.timezone.utc), False, None, 9, 1, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffb00d2050&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(9, 1) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_03_get_flow_steps_order" time="0.014"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(10, 4) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaefd9a90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 250780, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 250784, tzinfo=datetime.timezone.utc), False, None, 10, 4, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaefd9a90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(10, 4) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafa9ca40&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaefd9a90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 250780, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 250784, tzinfo=datetime.timezone.utc), False, None, 10, 4, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaefd9a90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(10, 4) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_05_read_step_first_time" time="0.013"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(11, 7) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffafacfe90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 343257, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 343261, tzinfo=datetime.timezone.utc), False, None, 11, 7, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffafacfe90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(11, 7) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafa9fec0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffafacfe90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 343257, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 343261, tzinfo=datetime.timezone.utc), False, None, 11, 7, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffafacfe90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(11, 7) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_06_read_step_second_time" time="0.014"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(12, 10) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf15ca10&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 465984, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 465988, tzinfo=datetime.timezone.utc), False, None, 12, 10, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf15ca10&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(12, 10) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafa9e0c0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf15ca10&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 465984, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 465988, tzinfo=datetime.timezone.utc), False, None, 12, 10, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf15ca10&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(12, 10) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_07_get_content_before_accessible" time="0.020"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(13, 13) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed67c90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 641685, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 641693, tzinfo=datetime.timezone.utc), False, None, 13, 13, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed67c90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(13, 13) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffaf81f9c0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed67c90&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 641685, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 641693, tzinfo=datetime.timezone.utc), False, None, 13, 13, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed67c90&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(13, 13) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_08_get_task_after_accessible" time="0.013"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(14, 16) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3cc490&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 747417, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 747421, tzinfo=datetime.timezone.utc), False, None, 14, 16, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3cc490&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(14, 16) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafe7e3e0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3cc490&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 747417, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 747421, tzinfo=datetime.timezone.utc), False, None, 14, 16, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3cc490&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(14, 16) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_09_10_post_quiz_answer" time="0.015"><failure message="django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(15, 21) already exists.">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3f8410&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 872067, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 872071, tzinfo=datetime.timezone.utc), False, None, 15, 21, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3f8410&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(15, 21) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

self = &lt;tests.test_content_api.TestContentApi object at 0xffffb01f7890&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffaf01e050&gt;
user_factory = &lt;function user_factory.&lt;locals&gt;.create_user at 0xffffb023fec0&gt;
flow_with_steps = &lt;Flow: Complex Flow&gt;

    def test_cnt_09_10_post_quiz_answer(self, api_client, user_factory, flow_with_steps):
        """CNT-09 &amp; CNT-10: POST quiz answer — правильный/неправильный ответ."""
        flow = flow_with_steps
        quiz_step = flow.flow_steps.get(step_type=FlowStep.StepType.QUIZ)
        question = quiz_step.quiz.questions.first()
        correct_answer = question.answers.get(is_correct=True)
        incorrect_answer = question.answers.get(is_correct=False)
    
        # --- Тест правильного ответа ---
        user1 = user_factory(telegram_id='user1_for_quiz')
        user_flow1 = UserFlow.objects.create(user=user1, flow=flow, status=UserFlow.FlowStatus.IN_PROGRESS)
&gt;       UserStepProgress.objects.create(user_flow=user_flow1, flow_step=quiz_step, status=UserStepProgress.StepStatus.AVAILABLE)

tests/test_content_api.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3f8410&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 872067, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 872071, tzinfo=datetime.timezone.utc), False, None, 15, 21, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaf3f8410&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(15, 21) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</failure></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_11_quiz_completion_unlocks_next_step" time="0.014"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(16, 22) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaec84fd0&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 998538, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 998543, tzinfo=datetime.timezone.utc), False, None, 16, 22, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaec84fd0&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(16, 22) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafbee3e0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaec84fd0&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 43, 998538, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 43, 998543, tzinfo=datetime.timezone.utc), False, None, 16, 22, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaec84fd0&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(16, 22) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_12_answer_foreign_quiz_question" time="0.016"><error message="failed on setup with &quot;django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(17, 25) already exists.&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed8f090&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 44, 136458, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 44, 136462, tzinfo=datetime.timezone.utc), False, None, 17, 25, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed8f090&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(17, 25) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

user = &lt;User: Test User (ID: 100)&gt;, flow_with_steps = &lt;Flow: Complex Flow&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafbefba0&gt;

    @pytest.fixture
    def started_user_flow(user, flow_with_steps, user_flow_factory):
        """Фикстура для начатого пользователем потока."""
        user_flow = user_flow_factory(user=user, flow=flow_with_steps, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Имитируем начало прохождения: первый шаг становится доступным
        first_step = flow_with_steps.flow_steps.order_by('order').first()
&gt;       UserStepProgress.objects.create(
            user_flow=user_flow,
            flow_step=first_step,
            status=UserStepProgress.StepStatus.AVAILABLE,
        )

tests/test_content_api.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed8f090&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 44, 136458, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 44, 136462, tzinfo=datetime.timezone.utc), False, None, 17, 25, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaed8f090&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(17, 25) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</error></testcase><testcase classname="tests.test_content_api.TestContentApi" name="test_cnt_13_quiz_shuffle" time="0.016"><failure message="django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq&quot;&#10;DETAIL:  Key (user_flow_id, flow_step_id)=(18, 28) already exists.">self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaef115d0&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 44, 232664, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 44, 232668, tzinfo=datetime.timezone.utc), False, None, 18, 28, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaef115d0&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(18, 28) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: UniqueViolation

The above exception was the direct cause of the following exception:

self = &lt;tests.test_content_api.TestContentApi object at 0xffffb0206950&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffaeefcc90&gt;
user = &lt;User: Test User (ID: 100)&gt;
flow_factory = &lt;function flow_factory.&lt;locals&gt;.create_flow at 0xffffafe7ef20&gt;
flow_step_factory = &lt;function flow_step_factory.&lt;locals&gt;.create_step at 0xffffafe7c040&gt;

    def test_cnt_13_quiz_shuffle(self, api_client, user, flow_factory, flow_step_factory):
        """CNT-13: Проверка shuffle_questions/answers — разный порядок в разных сессиях."""
        flow = flow_factory(title="Shuffle Flow")
        step = flow_step_factory(flow, step_type=FlowStep.StepType.QUIZ)
        quiz = Quiz.objects.create(flow_step=step, title="Shuffle Quiz", shuffle_questions=True, shuffle_answers=True)
    
        # Создаем несколько вопросов и ответов
        for i in range(5):
            q = QuizQuestion.objects.create(quiz=quiz, question=f"Q{i}", order=i)
            for j in range(5):
                QuizAnswer.objects.create(question=q, answer_text=f"Q{i}A{j}", order=j)
    
        user_flow = UserFlow.objects.create(user=user, flow=flow, status=UserFlow.FlowStatus.IN_PROGRESS)
&gt;       UserStepProgress.objects.create(user_flow=user_flow, flow_step=step, status=UserStepProgress.StepStatus.AVAILABLE)

tests/test_content_api.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:658: in create
    obj.save(force_insert=True, using=self.db)
apps/flows/models.py:650: in save
    super().save(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:814: in save
    self.save_base(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:877: in save_base
    updated = self._save_table(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1020: in _save_table
    results = self._do_insert(
/usr/local/lib/python3.11/site-packages/django/db/models/base.py:1061: in _do_insert
    return manager._insert(
/usr/local/lib/python3.11/site-packages/django/db/models/manager.py:87: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:1805: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1822: in execute_sql
    cursor.execute(sql, params)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
/usr/local/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.backends.utils.CursorWrapper object at 0xffffaef115d0&gt;
sql = 'INSERT INTO "user_step_progress" ("created_at", "updated_at", "is_deleted", "deleted_at", "user_flow_id", "flow_step_...", "completed_at") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING "user_step_progress"."id"'
params = (datetime.datetime(2025, 6, 14, 14, 10, 44, 232664, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 6, 14, 14, 10, 44, 232668, tzinfo=datetime.timezone.utc), False, None, 18, 28, ...)
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0xffffaef115d0&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)
E               django.db.utils.IntegrityError: duplicate key value violates unique constraint "user_step_progress_user_flow_id_flow_step_id_a6a8f0ac_uniq"
E               DETAIL:  Key (user_flow_id, flow_step_id)=(18, 28) already exists.

/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py:89: IntegrityError</failure></testcase><testcase classname="tests.test_my_api.TestMyApi" name="test_my_01_get_my_flows_unauthorized" time="0.002" /><testcase classname="tests.test_my_api.TestMyApi" name="test_my_01_get_my_flows_list" time="0.012" /><testcase classname="tests.test_my_api.TestMyApi" name="test_my_02_get_my_progress_aggregated" time="0.026"><failure message="django.core.exceptions.FieldError: Cannot resolve keyword 'progress_percentage' into field. Choices are: actions, completed_at, completed_flows, created_at, current_step, current_step_id, deleted_at, expected_completion_date, flow, flow_buddies, flow_id, id, is_deleted, pause_reason, paused_at, paused_by, paused_by_id, quiz_answers, started_at, status, step_progress, total_flows, updated_at, user, user_id">self = &lt;tests.test_my_api.TestMyApi object at 0xffffb0130c10&gt;
api_client = &lt;rest_framework.test.APIClient object at 0xffffaf36d790&gt;
user = &lt;User: Test User (ID: 100)&gt;
flow_factory = &lt;function flow_factory.&lt;locals&gt;.create_flow at 0xffffafbedda0&gt;
flow_step_factory = &lt;function flow_step_factory.&lt;locals&gt;.create_step at 0xffffafbed4e0&gt;
user_flow_factory = &lt;function user_flow_factory.&lt;locals&gt;.create_user_flow at 0xffffafbec860&gt;

    def test_my_02_get_my_progress_aggregated(self, api_client, user, flow_factory, flow_step_factory, user_flow_factory):
        """
        MY-02: GET /api/my/progress/ — корректный агрегированный прогресс (percent)
        """
        # --- Flow 1: 2 шага, 1 завершен (50%) ---
        flow1 = flow_factory(title="Flow 1")
        step1_1 = flow_step_factory(flow1, order=1)
        step1_2 = flow_step_factory(flow1, order=2)
        uf1 = user_flow_factory(user=user, flow=flow1, status=UserFlow.FlowStatus.IN_PROGRESS)
        # Сигнал создаст прогресс, нам нужно его обновить
        UserStepProgress.objects.filter(user_flow=uf1, flow_step=step1_1).update(status=UserStepProgress.StepStatus.COMPLETED)
    
        # --- Flow 2: 1 шаг, завершен (100%) ---
        flow2 = flow_factory(title="Flow 2")
        step2_1 = flow_step_factory(flow2, order=1)
        uf2 = user_flow_factory(user=user, flow=flow2, status=UserFlow.FlowStatus.IN_PROGRESS)
        UserStepProgress.objects.filter(user_flow=uf2, flow_step=step2_1).update(status=UserStepProgress.StepStatus.COMPLETED)
        # Завершаем весь флоу, чтобы он считался completed
        uf2.complete()
        uf2.save()
    
        api_client.force_authenticate(user=user)
&gt;       response = api_client.get('/api/my/progress/')

tests/test_my_api.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:289: in get
    response = super().get(path, data=data, **extra)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:206: in get
    return self.generic('GET', path, **r)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:234: in generic
    return super().generic(
/usr/local/lib/python3.11/site-packages/django/test/client.py:609: in generic
    return self.request(**r)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:286: in request
    return super().request(**kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/test.py:238: in request
    request = super().request(**kwargs)
/usr/local/lib/python3.11/site-packages/django/test/client.py:891: in request
    self.check_exception(response)
/usr/local/lib/python3.11/site-packages/django/test/client.py:738: in check_exception
    raise exc_value
/usr/local/lib/python3.11/site-packages/django/core/handlers/exception.py:55: in inner
    response = get_response(request)
/usr/local/lib/python3.11/site-packages/django/core/handlers/base.py:197: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
/usr/local/lib/python3.11/site-packages/django/views/decorators/csrf.py:56: in wrapper_view
    return view_func(*args, **kwargs)
/usr/local/lib/python3.11/site-packages/django/views/generic/base.py:104: in view
    return self.dispatch(request, *args, **kwargs)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
/usr/local/lib/python3.11/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
apps/flows/views.py:75: in get
    aggregation = user_flows.aggregate(
/usr/local/lib/python3.11/site-packages/django/db/models/query.py:592: in aggregate
    return self.query.chain().get_aggregation(self.db, kwargs)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py:398: in get_aggregation
    aggregate = aggregate_expr.resolve_expression(
/usr/local/lib/python3.11/site-packages/django/db/models/aggregates.py:64: in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
/usr/local/lib/python3.11/site-packages/django/db/models/expressions.py:950: in resolve_expression
    c.source_expressions[pos] = arg.resolve_expression(
/usr/local/lib/python3.11/site-packages/django/db/models/expressions.py:829: in resolve_expression
    return query.resolve_ref(self.name, allow_joins, reuse, summarize)
/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py:1977: in resolve_ref
    join_info = self.setup_joins(
/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py:1824: in setup_joins
    path, final_field, targets, rest = self.names_to_path(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;django.db.models.sql.query.Query object at 0xffffaf3ecb10&gt;
names = ['progress_percentage'], opts = &lt;Options for UserFlow&gt;
allow_many = True, fail_on_missing = True

    def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
        """
        Walk the list of names and turns them into PathInfo tuples. A single
        name in 'names' can generate multiple PathInfos (m2m, for example).
    
        'names' is the path of names to travel, 'opts' is the model Options we
        start the name resolving from, 'allow_many' is as for setup_joins().
        If fail_on_missing is set to True, then a name that can't be resolved
        will generate a FieldError.
    
        Return a list of PathInfo tuples. In addition return the final field
        (the last used join field) and target (which is a field guaranteed to
        contain the same value as the final field). Finally, return those names
        that weren't found (which are likely transforms and the final lookup).
        """
        path, names_with_path = [], []
        for pos, name in enumerate(names):
            cur_names_with_path = (name, [])
            if name == "pk":
                name = opts.pk.name
    
            field = None
            filtered_relation = None
            try:
                if opts is None:
                    raise FieldDoesNotExist
                field = opts.get_field(name)
            except FieldDoesNotExist:
                if name in self.annotation_select:
                    field = self.annotation_select[name].output_field
                elif name in self._filtered_relations and pos == 0:
                    filtered_relation = self._filtered_relations[name]
                    if LOOKUP_SEP in filtered_relation.relation_name:
                        parts = filtered_relation.relation_name.split(LOOKUP_SEP)
                        filtered_relation_path, field, _, _ = self.names_to_path(
                            parts,
                            opts,
                            allow_many,
                            fail_on_missing,
                        )
                        path.extend(filtered_relation_path[:-1])
                    else:
                        field = opts.get_field(filtered_relation.relation_name)
            if field is not None:
                # Fields that contain one-to-many relations with a generic
                # model (like a GenericForeignKey) cannot generate reverse
                # relations and therefore cannot be used for reverse querying.
                if field.is_relation and not field.related_model:
                    raise FieldError(
                        "Field %r does not generate an automatic reverse "
                        "relation and therefore cannot be used for reverse "
                        "querying. If it is a GenericForeignKey, consider "
                        "adding a GenericRelation." % name
                    )
                try:
                    model = field.model._meta.concrete_model
                except AttributeError:
                    # QuerySet.annotate() may introduce fields that aren't
                    # attached to a model.
                    model = None
            else:
                # We didn't find the current field, so move position back
                # one step.
                pos -= 1
                if pos == -1 or fail_on_missing:
                    available = sorted(
                        [
                            *get_field_names_from_opts(opts),
                            *self.annotation_select,
                            *self._filtered_relations,
                        ]
                    )
&gt;                   raise FieldError(
                        "Cannot resolve keyword '%s' into field. "
                        "Choices are: %s" % (name, ", ".join(available))
                    )
E                   django.core.exceptions.FieldError: Cannot resolve keyword 'progress_percentage' into field. Choices are: actions, completed_at, completed_flows, created_at, current_step, current_step_id, deleted_at, expected_completion_date, flow, flow_buddies, flow_id, id, is_deleted, pause_reason, paused_at, paused_by, paused_by_id, quiz_answers, started_at, status, step_progress, total_flows, updated_at, user, user_id

/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py:1725: FieldError</failure></testcase><testcase classname="tests.test_my_api.TestMyApi" name="test_my_03_get_progress_for_my_flow" time="0.013" /><testcase classname="tests.test_my_api.TestMyApi" name="test_my_03_get_progress_for_other_flow" time="0.010" /><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_01_first_step_available_on_start" time="0.014" /><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_02_second_step_locked" time="0.023" /><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_03_flow_completed_after_last_step" time="0.033" /><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_04_steps_inaccessible_when_paused" time="0.022"><failure message="assert True is False&#10; +  where True = &lt;UserStepProgress: Test User - Step 1: Article (available)&gt;.is_accessible">self = &lt;tests.test_progress_business_rules.TestProgressBusinessRules object at 0xffffb0144190&gt;
in_progress_flow = &lt;UserFlow: Test User - Complex Flow&gt;
buddy_user = &lt;User: Buddy User (ID: 300)&gt;

    def test_prg_04_steps_inaccessible_when_paused(self, in_progress_flow, buddy_user):
        """PRG-04: Если status=paused, все steps.is_accessible → false."""
        first_step_progress = UserStepProgress.objects.get(user_flow=in_progress_flow, flow_step__order=1)
        assert first_step_progress.is_accessible is True
    
        # Паузим флоу
        in_progress_flow.pause(paused_by=buddy_user)
        in_progress_flow.save()
    
        assert in_progress_flow.status == UserFlow.FlowStatus.PAUSED
    
        # Проверяем, что шаг стал недоступен
        first_step_progress.refresh_from_db()
&gt;       assert first_step_progress.is_accessible is False
E       assert True is False
E        +  where True = &lt;UserStepProgress: Test User - Step 1: Article (available)&gt;.is_accessible

tests/test_progress_business_rules.py:80: AssertionError</failure></testcase><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_05_modify_progress_in_paused_state" time="0.022" /><testcase classname="tests.test_progress_business_rules.TestProgressBusinessRules" name="test_prg_06_estimated_time_sum" time="0.006" /><testcase classname="tests.test_utils" name="test_generate_random_string_default_length" time="0.000" /><testcase classname="tests.test_utils" name="test_generate_random_string_letters_only" time="0.000" /><testcase classname="tests.test_utils" name="test_generate_secure_token_length_and_hex" time="0.000" /><testcase classname="tests.test_utils" name="test_generate_secure_token_uniqueness" time="0.036" /></testsuite></testsuites>