#!/usr/bin/env python
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Django management –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import subprocess
from pathlib import Path


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'onboarding.settings')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
    current_dir = Path(__file__).resolve().parent
    sys.path.insert(0, str(current_dir))


def run_django_command(command, description):
    """–ó–∞–ø—É—Å–∫ Django management –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ subprocess"""
    print(f"\n{'='*60}")
    print(f"üîß {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            [sys.executable, 'manage.py'] + command,
            check=True,
            capture_output=True,
            text=True
        )
        
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(result.stderr)
            
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'logs',
        'media', 
        'staticfiles',
        'static',
        'apps/common/management',
        'apps/common/management/commands',
    ]
    
    base_dir = Path(__file__).resolve().parent
    
    for dir_name in directories:
        dir_path = base_dir / dir_name
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    return True


def create_management_command():
    """–°–æ–∑–¥–∞–Ω–∏–µ Django management –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    management_dir = Path(__file__).resolve().parent / 'apps/common/management'
    commands_dir = management_dir / 'commands'
    
    # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
    for init_file in [management_dir / '__init__.py', commands_dir / '__init__.py']:
        if not init_file.exists():
            init_file.touch()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {init_file}")


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST', 'DB_PORT']
    
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("‚ÑπÔ∏è  –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    else:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not telegram_token:
        print("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚úÖ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print(f"\n{'='*60}")
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –û–ù–ë–û–†–î–ò–ù–ì–ê")
    print(f"{'='*60}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –®–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    steps = [
        (check_environment, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        (create_directories, "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"),
        (create_management_command, "–°–æ–∑–¥–∞–Ω–∏–µ Django –∫–æ–º–∞–Ω–¥"),
        (lambda: run_django_command(['migrate'], "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"), None),
        (lambda: run_django_command(['collectstatic', '--noinput'], "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"), None),
        (lambda: run_django_command(['setup_system'], "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"), None),
        (lambda: run_django_command(['load_demo_data'], "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"), None),
        (lambda: run_django_command(['generate_tokens'], "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"), None),
    ]
    
    failed_steps = []
    
    for step_func, description in steps:
        if description:
            print(f"\nüîß {description}")
            
        try:
            if not step_func():
                failed_steps.append(description or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            failed_steps.append(description or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if failed_steps:
        print(f"\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(failed_steps)}")
        sys.exit(1)
    else:
        print(f"\n{'='*60}")
        print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"{'='*60}")
        print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        print("   ‚Ä¢ API: http://localhost:8000/api/")
        print("   ‚Ä¢ –ê–¥–º–∏–Ω–∫–∞: http://localhost:8000/admin/")
        print("   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/docs/")
        print(f"{'='*60}")


if __name__ == '__main__':
    main()