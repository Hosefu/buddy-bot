version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: onboarding
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования и Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django приложение
  web:
    build: .
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    entrypoint: /entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000

  # Celery worker
  celery:
    build: .
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
    entrypoint: /entrypoint.sh
    command: celery -A onboarding worker --loglevel=info

  # Celery beat (планировщик)
  celery-beat:
    build: .
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
    entrypoint: /entrypoint.sh
    command: celery -A onboarding beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Nginx (для production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: