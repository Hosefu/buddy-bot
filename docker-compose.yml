version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: onboarding
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d onboarding"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis для кеширования и Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django приложение
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    environment:
      # Django settings
      DJANGO_SETTINGS_MODULE: onboarding.settings
      SECRET_KEY: django-insecure-development-key-change-in-production
      DEBUG: "True"
      
      # Database
      DB_NAME: onboarding
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      
      # Telegram (заполнить реальными значениями)
      TELEGRAM_BOT_TOKEN: ""
      TELEGRAM_WEBHOOK_URL: ""
      
      # CORS
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8000

  # Celery worker для фоновых задач
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - logs_volume:/app/logs
    environment:
      # Django settings
      DJANGO_SETTINGS_MODULE: onboarding.settings
      SECRET_KEY: django-insecure-development-key-change-in-production
      DEBUG: "True"
      
      # Database
      DB_NAME: onboarding
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      
      # Telegram
      TELEGRAM_BOT_TOKEN: ""
      TELEGRAM_WEBHOOK_URL: ""
    depends_on:
      - web
      - redis
    restart: unless-stopped
    command: celery -A onboarding worker --loglevel=info --concurrency=2

  # Celery beat (планировщик задач)
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - logs_volume:/app/logs
    environment:
      # Django settings
      DJANGO_SETTINGS_MODULE: onboarding.settings
      SECRET_KEY: django-insecure-development-key-change-in-production
      DEBUG: "True"
      
      # Database
      DB_NAME: onboarding
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      
      # Telegram
      TELEGRAM_BOT_TOKEN: ""
      TELEGRAM_WEBHOOK_URL: ""
    depends_on:
      - web
      - redis
    restart: unless-stopped
    command: celery -A onboarding beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Nginx (для production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  default:
    driver: bridge